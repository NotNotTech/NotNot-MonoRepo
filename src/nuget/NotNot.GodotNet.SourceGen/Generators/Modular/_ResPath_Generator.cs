using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using NotNot.GodotNet.SourceGen.Generators.Modular;
using NotNot.GodotNet.SourceGen.Helpers;


/// <summary>
/// creates a `_ResPath` class that lists all assets imported by Godot.  list is accessable at compile time.
/// </summary>
[Generator]
public class _ResPath_Generator : ModularGenerator_Base
{
	public _ResPath_Generator()
	{
		//TargetAttributes = ["NotNotSceneRoot", "NotNotSceneRootAttribute"];

		// Define regex patterns to match additional files of interest
		TargetAdditionalFiles =
		[
			new Regex(@"\.import$", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Compiled),
			new Regex(@"\.uid", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Compiled),
			//new Regex(@".*", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Compiled),
		];

	}



	/// <summary>
	/// Generates the partial classes based on the configuration.
	/// </summary>
	/// <param name="config">The configuration object containing context and parameters.</param>
	public override void GeneratePartialClasses(GodotResourceGeneratorContextConfig config)
	{

		if (config.AdditionalFiles.Count > 0)
		{
			var results = Gen_ImportedAssetsClass(config);
			config.Context.AddSource($"{results.filename}", SourceText.From(results.generatedCode, Encoding.UTF8));
		}

	}


	private (string filename, string generatedCode) Gen_ImportedAssetsClass(GodotResourceGeneratorContextConfig config)
	{
		var className = "_ResPath";
		var filename = $"{className}.g.cs";

		var namespaceName = config.RootNamespace;



		var sb = new StringBuilder();


		sb.AppendLine($$"""

//usings
using Godot;
//using System.CodeDom.Compiler;

using NotNot;


//namespace (if any)
{{Func.Eval(() =>
		{
			if (!string.IsNullOrEmpty(namespaceName))
			{
				return $"namespace {namespaceName};";
			}
			else
			{
				return "//global namespace?";
			}
		})}}

///<summary>
///Listing of all assets imported by Godot.  This class is autogenerated by NotNot.GodotNet.SourceGen._ResPath_Generator
///<para>If you expect a file to be listed here that is not, be sure that it's in your `.csproj` </para>
///</summary>
//[GeneratedCode("NotNot.GodotNet.SourceGen._ResPath_Generator", "1.0.0.0")]
public partial class {{className}}
{

	//static listing of all imports
	{{Func.Eval(() =>
	{
		var lines = new StringBuilder();

		foreach (var originalFileName in config.AllAdditionalFilePaths)
		{
			var importFileName = originalFileName;
			var originalExtension = originalFileName.Substring(importFileName.LastIndexOf('.'));

			//remove known secondary extensions
			switch (originalExtension)
			{
				case ".import":
				case ".uid":
					importFileName = originalFileName.Remove(originalFileName.LastIndexOf(originalExtension));
					break;
				case ".json":
					importFileName = originalFileName;
					break;
				default:
					//only allow above
					continue;
					//importFileName = originalFileName;
					break;
			}
			var extension = importFileName.Substring(importFileName.LastIndexOf('.'));



			switch (extension)
			{
				case ".import":
				case ".uid":
					//import suffixes should have been removed already
					throw new Exception("should have been removed already");
				case ".glsl":
					//ignore above
					continue;
				case ".gd":
				case ".tres":
				case ".txt":
				case ".json":
				case ".res":
				case ".model":
				case ".gdshader":
				default:
					{
						if (config.TryConvertFilePathToResPath(importFileName, out var resPath))
						{
							var assetId = importFileName.Replace(config.resRootPath, "");
							var id = assetId._ConvertToAlphanumericCaps();
							lines.AppendLine($""" public static StringName {id} = "{resPath}";""");
						}
					}
					break;
			}

		}

		return lines;
	})}}



 //end of class
 }
""");




		var generatedSource = sb.ToString();
		return (filename, generatedSource);
	}

}
